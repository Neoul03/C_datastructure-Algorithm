#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
typedef int elem; //elem이라는 추상적 자료형을 사용할 것, 그리고 이 자료형은 int다. 이를 활용해 나중에 자료형을 변경해줄 수 있음.

int stack_top = -1;
int stack_size = 0;
elem* stack = NULL;

int size()
{
	int size = 0;
	size = stack_top + 1;
	return size;
}

int empty()
{
	if (stack_top == -1) {
		return 1;
	}
	else {
		return 0;
	}
}

int full()
{
	if (stack_top == stack_size - 1) { //stack이 가득 찬 경우 1을 반환
		return 1;
	}
	else if(stack_top == -1){ //stack이 빈 경우 2를 반환
		return 2;
	}
	else {
		return 0;
	}
}

void push(elem item)
{
	stack_top += 1;
	stack[stack_top] = item;
}

elem pop()
{
	elem P = 0;
	P = stack[stack_top];
	stack[stack_top] = NULL;
	stack_top -= 1;
	return P;
}

elem top()
{
	elem T = 0;
	T = stack[stack_top];
	return T;
}

void print()
{
	for (int i = 0; i <= stack_top; i++) {
		printf("%d ", stack[i]);
	}
	printf("\n");
}

int main(void)
{
	int action = 0;
	elem newElem = 0;
	printf("Size of stack: ");
	scanf("%d", &stack_size);
	rewind(stdin);
	// dynamic allocation
	stack = (elem*)malloc(sizeof(elem) * stack_size);

	while (1)
	{
		printf("Choose action: \n");
		printf("1: push(), 2: pop(), 3: top(), 4: size(), 5: empty(), 6: end\n");
		scanf("%d", &action);
		rewind(stdin);

		switch (action)
		{
		case 1:
			if (full() == 1) {
				printf("Stack is full!\n");
			}
			else {
				printf("Element to push: ");
				scanf("%d", &newElem);
				rewind(stdin);
				push(newElem);
			}
			print();
			break;
		case 2:
			if (full() == 2) {
				printf("Stack is empty!\n");
			}
			else{
				printf("pop(): %d\n", pop());
			}
			print();
			break;
		case 3:
			if (full() == 2) {
				printf("Stack is empty!\n");
			}
			else{
				printf("top(): %d\n", top());
			}
			print();
			break;
		case 4:
			printf("size(): %d\n", size());
			print();
			break;
		case 5:
			printf("empty(): %d\n", empty());
			print();
			break;
		case 6:
			printf("End the program\n");
			exit(0);
		default:
			printf("Wrong option: %d\n", action);
		}
	}

	free(stack);
	return 0;
}
